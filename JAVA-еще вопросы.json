[
  {
    "question": "Что такое ООП?",
    "correctAnswer": "A",
    "answerOptions": [
      "Объектно-ориентированное программирование — методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.",
      "Объектно-ориентированное программирование — так называют любой тип программирования, в котором используются понятия высокого уровня и, в отличие от Assembler, в котором не работают напрямую с ячейками памяти ПК.",
      "Объектно-ориентированное программирование — просто красивое понятие. Если вдуматься, оно не несет дополнительной смысловой нагрузки, просто программисты любят аббревиатуры, так области их знаний выглядят сложнее.",
      "Очень одинокий программист."
    ]
  },
  {
    "question": "Что такое класс в Java?",
    "correctAnswer": "B",
    "answerOptions": [
      "Уровень сложности программы. Все операторы делятся на классы в зависимости от сложности их использования.",
      "Базовый элемент объектно-ориентированного программирования в языке Java.",
      "Просто одно из возможных названий переменной.",
      "Такое понятие есть только в C++, в Java такого понятия нет."
    ]
  },
  {
    "question": "Как объявить класс в коде?",
    "correctAnswer": "A",
    "answerOptions": [
      "class MyClass {}",
      "new class MyClass {}",
      "select * from class MyClass {}",
      "MyClass extends class {}"
    ]
  },
  {
    "question": "Для чего используется оператор NEW?",
    "correctAnswer": "C",
    "answerOptions": [
      "Для создания новой переменной.",
      "Для объявления нового класса.",
      "Для создания экземпляра класса.",
      "Это антагонист оператора OLD."
    ]
  },
  {
    "question": "Что означает ключевое слово extends?",
    "correctAnswer": "A",
    "answerOptions": [
      "Что данный класс наследуется от другого.",
      "Что это дополнительный модуль класса, который расширяет его свойства.",
      "Что два класса делают одно и то же.",
      "Что это самый большой класс в программе."
    ]
  },
  {
    "question": "Что означает перегрузка метода в Java (overload).",
    "correctAnswer": "C",
    "answerOptions": [
      "Изменение поведения метода класса относительно родительского.",
      "Изменение поведения метода класса относительно дочернего.",
      "Несколько методов с одинаковым названием, но разным набором параметров.",
      "Несколько разных классов с одинаковым методом."
    ]
  },
  {
    "question": "Что означает переопределение метода в Java (override).",
    "correctAnswer": "A",
    "answerOptions": [
      "Изменение поведения метода класса относительно родительского.",
      "Изменение поведения метода класса относительно дочернего.",
      "Несколько методов с одинаковым названием, но разным набором параметров.",
      "Несколько разных классов с одинаковым методом."
    ]
  },
  {
    "question": "Что такое перегрузка метода:",
    "correctAnswer": "B",
    "answerOptions": [
      "Возможность создать несколько вариантов методов с одинаковыми именами",
      "Возможность создать несколько вариантов методов с одинаковыми именами и разными исходными параметрами",
      "Возможность создать несколько вариантов методов с разными исходными параметрами",
      "В Java нет возможности перегрузки методов с 2017г."
    ]
  },
  {
    "question": "Чем отличаются static-метод класса от обычного метода класса.",
    "correctAnswer": "C",
    "answerOptions": [
      "Обычный метод класса можно перегрузить, а static-метод нельзя.",
      "Обычный метод класса можно переопределить, а static-метод нельзя.",
      "Обычный метод класса работает от объекта класса, а static-метод от всего класса.",
      "Static-метод класса можно вызывать только внутри класса, а обычный - в любой части кода."
    ]
  },
  {
    "question": "Как вызвать static-метод внутри обычного?",
    "correctAnswer": "D",
    "answerOptions": [
      "Никак, static-метод можно вызвать только от объекта класса.",
      "Можно, надо перед этим перегрузить обычный метод класса.",
      "Можно, надо перед этим переопределить обычный метод класса.",
      "Можно, ничего дополнительно делать не надо."
    ]
  },
  {
    "question": "Как вызвать обычный метод класса внутри static-метода?",
    "correctAnswer": "A",
    "answerOptions": [
      "Никак, static-метод не работает с объектом класса.",
      "Можно, надо перед этим перегрузить обычный метод класса.",
      "Можно, надо перед этим переопределить обычный метод класса.",
      "Можно, ничего дополнительно делать не надо."
    ]
  },
  {
    "question": "Для чего необходимо ключевое слово this",
    "correctAnswer": "B",
    "answerOptions": [
      "Это указатель на переопределенный метод класса. Его нельзя опускать при вызове, иначе переопределение не сработает.",
      "Это указатель на текущий объект класса внутри самого класса. Его можно опускать при вызове метода класса, но лучше этого не делать.",
      "Это не ключевое слово.",
      "Это ключевое слово для вызова обычного метода внутри static-метода. Его нельзя опускать, иначе вызов не сработает и будет ошибка."
    ]
  },
  {
    "question": "Что вернет метод, объявленный следующим образом: public static int getAmount()",
    "correctAnswer": "D",
    "answerOptions": [
      "Не ясно, надо смотреть код метода.",
      "Вернет static-поле класса.",
      "Вернет ссылку на объект класса this. ",
      "Вернет целочисленное значение."
    ]
  },
  {
    "question": "Какой размер в байтах занимает тип double?",
    "correctAnswer": "A",
    "answerOptions": [
      "8 байт",
      "16 байт",
      "4 байтa",
      "2 байтa"
    ]
  },
  {
    "question": "Может ли переопределяющий метод выбрасывать более частные исключения?",
    "correctAnswer": "A",
    "answerOptions": [
      "Да",
      "Нет",
      "Такой метод не существует",
      "Помощь зала"
    ]
  },
  {
    "question": "Что означает ключевое слово void?",
    "correctAnswer": "B",
    "answerOptions": [
      "Возвращается пустое пространство памяти, чтобы разработчики могли его использовать.",
      "Метод, объявленный с возвращаемым типом void не возвращает значение.",
      "void не поддерживается в Java",
      "Java не поддерживает void"
    ]
  },
  {
    "question": "Корректное ли это лямбда выражение?: () -> return;",
    "correctAnswer": "A",
    "answerOptions": [
      "Нет",
      "Да",
      "Java не поддерживает никаких лямбдов",
      "Да (на 86%)"
    ]
  },
  {
    "question": "Является ли HashSet упорядоченным и отсортированным множеством?",
    "correctAnswer": "A",
    "answerOptions": [
      "Нет",
      "Да",
      "И Да и Нет",
      "HashSet не существует"
    ]
  },
  {
    "question": "Может ли обычный внутренний класс быть объявлен с модификатором доступа?",
    "correctAnswer": "B",
    "answerOptions": [
      "Да",
      "Нет",
      "В Java классов не существует",
      "Тут должна быть Ваша реклама"
    ]
  },
  {
    "question": "Что такое функциональный интерфейс?",
    "correctAnswer": "A",
    "answerOptions": [
      "Интерфейс с единственным абстрактным методом.",
      "Интерфейс с единственным методам.",
      "В Java интерфейсов не существует",
      "Ай-да все домой )"
    ]
  },
  {
    "question": "Что определяет какой переопределенный метод будет вызван -  тип ссылки или тип объекта?",
    "correctAnswer": "A",
    "answerOptions": [
      "Тип объекта.",
      "Тип ссылки.",
      "Постановление Мингорисполкома",
      "один известный Telegram канал"
    ]
  }
]